var fs = require('fs');
var log = require('tech').log;
var config = require('config');
var Message = require('./message');

var path = __dirname + '/dialogs.json';
var dialogs;

exports.connect = function() {
    try {
        dialogs = JSON.parse(fs.readFileSync(path, 'utf-8'));
    } catch (err) {
        if (err.message.indexOf("ENOENT") == 0) {
            log.info("Создание файла с комнатами");
            fs.writeFileSync(path, JSON.stringify({}, '', 4), 'utf-8');
        } else
            log.error(err);
        dialogs = {};
    }
};

exports.getMessages = function(room, start, isLastMessages) {
    return new Promise(function(resolve, reject) {
        log.debug("Получение истории сообщений чата для комнаты " + room);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                try {
                    db = JSON.parse(db);

                } catch (e) {
                    db = {};
                    log.info("getMessages: В диалогах неверный json");
                }

                var count = config.COUNT_OF_MESSAGES_TO_LOAD;
                var x = [];

                if (db[room] && start >= 0 && start <= db[room].mas.length) {
                    if (isLastMessages)
                        x = db[room].mas.slice(-count);
                    else
                        x = db[room].mas.slice(start, count);
                };

                resolve(x);
            }
        });
    });
};

exports.getRooms = function () {
    return new Promise(function(resolve, reject) {
        log.debug("Поиск комнат");
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                try {
                    db = JSON.parse(db);

                } catch (e) {
                    db = {};
                    log.info("getMessages: В диалогах неверный json");
                }

                var x =[];
                for (var i = 0; i < Object.keys(db).length; i++) {
                    x.push({author: db[Object.keys(db)[i]].author,
                        id: db[Object.keys(db)[i]].id});
                }

                resolve(x);
            }
        });
    })
}

exports.containRoom = function (id) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                try {
                    db = JSON.parse(db);

                } catch (e) {
                    db = {};
                    log.info("getMessages: В диалогах неверный json");
                }

                if (Object.keys(db).indexOf(id.toString()) != -1)
                    resolve(id);
                else
                    resolve(-1);
            }
        });
    })
}

exports.addRoom = function(author) {
    return new Promise(function(resolve, reject) {
        log.debug("Добавление комнаты");
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                return reject(err);

            }
            try {
                db = JSON.parse(db);

            } catch (e) {
                db = {};
                log.error("addRoom: В диалогах неверный json");

            }

            var room = Number(Object.keys(db)[Object.keys(db).length - 1]) + 1;
            
            if (room == undefined || Number.isNaN(room) || room == null)
                room = 0;

            if (db[room]) {
                log.info("Попытка создания дубликата комнаты");
                return resolve(true);
            }

            db[room] = {author: author, id: room, mas: []};

            db = JSON.stringify(db, '', 4);

            fs.writeFile(path, db, 'utf-8', function(err) {
                if (err) {
                    log.error(err);
                    reject(err);
                } else
                    resolve(JSON.stringify({author: author, id: room}));
            });
        });
    });
};

exports.addMessage = function(room, sender, message, date, attachment) {
    return new Promise(function(resolve, reject) {
        log.debug("Добавление сообщения из комнаты " + room +
            " от пользователя " + sender);

        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (!db[room]) {
                    log.info("Попытка добавить сообщение в несуществующую комнату");
                    return resolve(true);
                }
                var m = new Message(sender, message, date);
                if(attachment){
                    m.attachment = attachment;

                }
                db[room].mas.push(m);

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);

                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteRoom = function (room) {
    return new Promise(function(resolve, reject) {
        log.debug("Удаление комнаты " + room);

        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (!db[room]) {
                    log.info("Попытка удалить несуществующую комнату");
                    return resolve(true);
                }
                db[room].mas.forEach(function (message) {
                    if (message.attachment) {
                        fs.unlink("./temp/"+message.attachment+".png", function (err) {
                            if(err) {
                                log.error("Ошибка при попытке удаления файла: " + err);
                            }
                        });
                    }
                })
                delete db[room];

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);

                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteAllRooms = function() {
    log.debug("Удаление всех комнат");

    fs.readdir("./temp", function (err, files) {
        if (err) {
            log.error("Ошибка при получении файлов из директории: "+err);
        } else {
            for (const file of files) {
                fs.unlink("./temp/"+file, function (err) {
                    if (err)
                        log.error("Ошибка при удалении файла " + file +": " + err);
                });
            }
        }
});
    fs.writeFile(path, JSON.stringify({}, '', 4), 'utf-8', function(err) {
        if (err)
            throw new Error(err);
    });

};

/**
 * News functions
 */

exports.getNews = function() {
    return new Promise(function(resolve, reject) {

        fs.readFile(__dirname + '/news.json', 'utf-8', function(err, db) {
            if (err) {
		if (err.message.indexOf("ENOENT") == 0) {
			log.info("Создание файла с новостями");
           		fs.writeFileSync(path, JSON.stringify({}, '', 4), 'utf-8');
		} else {
                	log.error(err);
                	reject(err);
		}

            } else {
                db = JSON.parse(db);

                var x = [];
                for (var i = 0; i < Object.keys(db).length; i++)
                    x.push({header: db[i].header, text: db[i].text, date: db[i].date});

                resolve(x);
            }
        });
    });
}
