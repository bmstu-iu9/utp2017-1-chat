var fs = require('fs');
var User = require('./User');
var config = require('config');
var log = require('tech').log;

var path = __dirname + '/users.json';

var users;

/**
 * DB of users
 */
/*
exports.connect = function() {
    users = require('./users.json');
};
*/
exports.connect = function() {
    try {
        users = JSON.parse(fs.readFileSync(path, 'utf-8'));
    } catch (err) {
        if (err.message.indexOf("ENOENT") == 0) {
            log.info("Создание файла с юзерами");
            fs.writeFileSync(path, JSON.stringify({ "Users": [] }, '', 4), 'utf-8');
        } else log.error(err);
        users = { "Users": [] };
    }
};

exports.getUserRead = function(login) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                console.log(err);
                reject(err);

            } else {
                db = JSON.parse(db);
                resolve(contain(db, login));
            }
        });
    });
};

/**
 * @Deprecated
 */
exports.getUserWrite = function(login) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                console.log(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                var r = contain(db, login);
                if (!r) {
                    console.log("No such person")
                    reject("No such person");

                } else {
                    db.Users.splice(db.Users.indexOf(r), 1);

                    var salt = saltExtra();
                    db.Users.push(new User(r.login, r.password, salt));
                    db = JSON.stringify(db, '', 4);

                    fs.writeFile(path, db, 'utf-8', function(err) {
                        if (err) {
                            console.log(err);
                            reject(err);
                        }
                    });

                    fs.readFile(path, 'utf-8', function(err, db) {
                        if (err) {
                            fs.writeFile(path, db, 'utf-8', function(err) {
                                if (err) {
                                    console.log(err);
                                    reject(err);
                                }
                            });
                        }
                    });

                    resolve(r);
                }
            }
        });
    });
};

exports.addUser = function(login, password, salt) { //may contain some another fields
    return new Promise(function(resolve, reject) {
        log.debug("Добавление юзера " + login);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                console.log(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (contain(db, login)) {
                    reject("Deprecated");

                } else {
                    db.Users.push(new User(login, password, salt));
                    db = JSON.stringify(db, '', 4);

                    fs.writeFile(path, db, 'utf-8', function(err) {
                        if (err) {
                            console.log(err);
                            reject(err);
                        }
                    });

                    resolve(true);
                }
            }
        });
    });
};


exports.deleteUser = function(login) {
    return new Promise(function(resolve, reject) {
        log.debug("Удаление юзера" + login);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                console.log(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                var r = contain(db, login);

                if (!r) {
                    console.log("No such user")
                    reject("No such user");

                } else {
                    db.Users.splice(db.Users.indexOf(r), 1);
                    db = JSON.stringify(db, '', 4);

                    fs.writeFile(path, db, 'utf-8', function(err) {
                        if (err) {
                            console.log(err);
                            reject(err);
                        }
                    });

                    resolve(true);
                }
            }
        });
    });
};

exports.deleteAllUsers = function() {
    log.debug("Удаление всех юзерв");
    fs.writeFileSync(path, JSON.stringify({ Users: [] }, '', 4), 'utf-8');

};

exports.saltExtra = function() { //generate salt
    var str = Math.floor(Math.random() * 9) + 1;
    for (var i = 0; i < config.SECRET_KEY;) {
        var x = Math.floor(Math.random() * (123 - 48)) + 48;
        if (x <= 57 || (x >= 65 && x <= 90) || x >= 97) {
            str += String.fromCharCode(x);
            i++;
        }
    }
    return str;
};


function contain(db, login) {
    var r;
    for (var i = 0; i < db.Users.length; i++)
        if (db.Users[i].login == login)
            r = db.Users[i];
    return r;
}